// Copyright (c) 2020 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

syntax = "proto3";

package bosdyn.api;

option java_outer_classname = "BasicCommandProto";

import "bosdyn/api/geometry.proto";
import "bosdyn/api/trajectory.proto";
import "google/protobuf/timestamp.proto";

// Move the robot into a "ready" position from which it can sit or stand up.
message SelfRightCommand {
    message Request {
        // SelfRight command request takes no additional arguments.
    }

    message Feedback {
        // SelfRight command request provides no feedback.
    }
}

// Stop the robot in place with minimal motion.
message StopCommand {
    message Request {
        // Stop command request takes no additional arguments.
    }

    message Feedback {
        // Stop command provides no feedback.
    }
}

// Freeze all joints at their current positions (no balancing control).
message FreezeCommand {
    message Request {
        // Freeze command request takes no additional arguments.
    }

    message Feedback {
        // Freeze command provides no feedback.
    }
}

// Get robot into a position where it is safe to power down, then power down. If the robot has
// fallen, it will power down directly. If the robot is not in a safe position, it will get to a
// safe position before powering down. The robot will not power down until it is in a safe state.
message SafePowerOffCommand {
    message Request {
        // SafePowerOff command request takes no additional arguments.
    }

    message Feedback {
        // The SafePowerOff will provide feedback on whether or not it has succeeded in powering off
        // the robot yet.

        enum Status {
            // STATUS_UNKNOWN should never be used. If used, an internal error has happened.
            STATUS_UNKNOWN = 0;
            // Robot has powered off.
            STATUS_POWERED_OFF = 1;
            // Robot is trying to safely power off.
            STATUS_IN_PROGRESS = 2;
        }
        // Current status of the command.
        Status status = 1;
    }
}

// Move along a trajectory in 2D space.
message SE2TrajectoryCommand {
    message Request {
        // The timestamp (in robot time) by which a command must finish executing.
        // This is a required field and used to prevent runaway commands.
        google.protobuf.Timestamp end_time = 1;

        // The name of the frame that trajectory is relative to. The trajectory must
        // be expressed in a gravity aligned frame, so either "vision", "odom", or
        // "flat_body". Any other provided se2_frame_name will be rejected
        // and the trajectory command will not be exectuted.
        string se2_frame_name = 3;

        // The trajectory that the robot should follow, expressed in the frame
        // identified by se2_frame_name.
        SE2Trajectory trajectory = 2;
    }

    message Feedback {
        // The SE2TrajectoryCommand will provide feedback on whether or not the robot has reached the
        // final point of the trajectory.

        enum Status {
            // STATUS_UNKNOWN should never be used. If used, an internal error has happened.
            STATUS_UNKNOWN = 0;

            // The robot has arrived at the goal.
            STATUS_AT_GOAL = 1;

            // The robot is attempting to go to a goal.
            STATUS_GOING_TO_GOAL = 2;
        }
        // Current status of the command.
        Status status = 1;
    }
}

// Move the robot at a specific SE2 velocity for a fixed amount of time.
message SE2VelocityCommand {
    message Request {
        // The timestamp (in robot time) by which a command must finish executing. This is a
        // required field and used to prevent runaway commands.
        google.protobuf.Timestamp end_time = 1;

        // The name of the frame that velocity and slew_rate_limit are relative to.
        // The trajectory must be expressed in a gravity aligned frame, so either
        // "vision", "odom", or "flat_body". Any other provided
        // se2_frame_name will be rejected and the velocity command will not be executed.
        string se2_frame_name = 5;

        // Desired planar velocity of the robot body relative to se2_frame_name.
        SE2Velocity velocity = 2;

        // If set, limits how quickly velocity can change relative to se2_frame_name.
        // Otherwise, robot may decide to limit velocities using default settings.
        // These values should be non-negative.
        SE2Velocity slew_rate_limit = 4;

        // Reserved for deprecated fields.
        reserved 3;
    }

    message Feedback {
        // Planar velocity commands provide no feedback.
    }
}

// Sit the robot down in its current position.
message SitCommand {
    message Request {
        // Sit command request takes no additional arguments.
    }

    message Feedback {
        enum Status {
            // STATUS_UNKNOWN should never be used. If used, an internal error has happened.
            STATUS_UNKNOWN = 0;
            // Robot is currently sitting.
            STATUS_IS_SITTING = 1;
            // Robot is trying to sit.
            STATUS_IN_PROGRESS = 2;
        }
        // Current status of the command.
        Status status = 2;
    }
}

// The stand the robot up in its current position.
message StandCommand {
    message Request {
        // Stand command request takes no additional arguments.
    }

    message Feedback {
        // The StandCommand will provide feedback on whether or not the robot has finished
        // standing up.

        enum Status {
            // STATUS_UNKNOWN should never be used. If used, an internal error has happened.
            STATUS_UNKNOWN = 0;
            // Robot has finished standing up and has completed desired body trajectory.
            // Robot is not attempting to move.
            STATUS_IS_STANDING = 1;
            // Robot is trying to come to a steady stand.
            STATUS_IN_PROGRESS = 2;
        }
        // Current status of the command.
        Status status = 1;
    }
}